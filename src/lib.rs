//! Extension for [`tonic_build`] allowing for disabling doctest for specific struct
//!
//! Allows to separate docstring for specific structs autogenerated by `tonic_build`. 
//! This may be handy in cases where comments for autogeneration input contain code 
//! that will be incorrectly treated as rust code and you have no control over the 
//! input. This extension gives way to disable doctest of these docs while retaining 
//! the docstring in a separate struct linked by the docstring in original struct.
//!
//! After using this hack full doctest run should pass even if autogenerated code 
//! normally contained offending parts that caused it to fail. E.g. in [SO question]
//!
//! [SO question]: https://stackoverflow.com/questions/66074003
//! [`tonic_build`]: https://docs.rs/tonic-build

#![warn(
    unsafe_code,
    missing_debug_implementations,
    missing_copy_implementations,
    missing_docs
)]
#![warn(clippy::pedantic)]
#![warn(clippy::use_self, clippy::missing_const_for_fn)]
// Too many false positives.
#![allow(
    clippy::missing_panics_doc,
    clippy::trait_duplication_in_bounds,
    clippy::missing_errors_doc,
    clippy::needless_borrow
)]

use convert_case::{Case, Casing};
use itertools::Itertools;

/// Extension for [`tonic_build::Builder`] allowing for code injection and doctest disabling
pub trait BuilderEx: Sized {
    /// Injects lines of code before given type, after its docstring.
    #[must_use]
    fn inject_code_for_type<'a, A, B>(self, path: A, code: B) -> Self
    where
        A: AsRef<str>,
        B: IntoIterator<Item = &'a str>;

    /// Separate docstring from given types and disable doctests for that docstring
    ///
    /// This is useful for the case when some protobuf comments has code examples that are not
    /// marked as different language, `ignore`, or `no_run`. Since by default any code is considered
    /// to be Rust, doctests could fail when checking generated files.
    ///
    /// Disabling doctests works in a following way:
    ///   1. Injects a new struct before the type with an offending docstring
    ///   2. Disables doctest for the injected struct, so that offending doctests are skipped
    ///   3. Adds a docstring referencing the injected struct for the original one
    ///
    /// Injected struct name is generated from protobuf type path, so paths must be reasonably
    /// different, preferably fully specified, e.g. `.google.api.HttpRule` should work best,
    /// `google.api.HttpRule` (without leading dot) will likely work, `HttpRule` may match several
    /// types and break compilation.
    ///
    /// # Usage
    /// ```rust
    /// # use tonic_disable_doctest::BuilderEx;
    /// tonic_build::configure()
    ///        .out_dir("target/")
    ///        .disable_doctests_for_types([".google.api.HttpRule"])
    ///        .compile(
    ///            &["assets/proto/api/google/api/http.proto"],
    ///            &["assets/proto/"],
    ///        )
    ///        .expect("Build should be successful");
    /// ```
    #[must_use]
    fn disable_doctests_for_types<'a, I>(self, paths: I) -> Self
    where
        I: IntoIterator<Item = &'a str>;
}

impl BuilderEx for tonic_build::Builder {
    fn inject_code_for_type<'a, A, B>(self, path: A, code: B) -> Self
    where
        A: AsRef<str>,
        B: IntoIterator<Item = &'a str>,
    {
        let code_lines = code.into_iter().join("\n");
        self.type_attribute(path, &code_lines)
    }

    fn disable_doctests_for_types<'a, I>(self, paths: I) -> Self
    where
        I: IntoIterator<Item = &'a str>,
    {
        paths.into_iter().fold(self, |fold, path| {
            // normalize names
            let struct_name = path
                .trim_start_matches('.')
                .replace('.', "-")
                .to_case(Case::Pascal);

            // prepare code injection
            let injection = [
                "#[cfg(not(doctest))]",
                "#[allow(dead_code, rustdoc::invalid_rust_codeblocks)]",
                &format!("pub struct __{struct_name}Docs;"),
                &format!("/// HACK: for docs see [`__{struct_name}Docs`]"),
                "/// ",
                "/// this hack allows full doctest pass without failures on examples from that doc",
            ]
            .into_iter()
            .join("\n");

            fold.inject_code_for_type(path, [injection.as_str()])
        })
    }

}


#[cfg(test)]
mod tests {
    use super::BuilderEx;

    #[test]
    fn test_build() {
        tonic_build::configure()
            .out_dir("target/")
            .disable_doctests_for_types([".google.api.HttpRule"])
            .compile_protos(
                &["assets/proto/api/google/api/http.proto"],
                &["assets/proto/"],
            )
            .expect("Build should be successful");
    }
}
